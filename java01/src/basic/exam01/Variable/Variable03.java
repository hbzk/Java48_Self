package basic.exam01.Variable;

//////////////////////////////////////////////////////
//주제 : 데이터형 - 정수형 : byte, short, int, long
//////////////////////////////////////////////////////
//
//만든이 :		엄진영
//

/* << 정수형 >>
* - 용도 : 정수값을 저장
* - 크기 : 크기에 따라서 다음 4가지로 분류할 수 있다.
*		byte	1 byte(-128 ~ +127)
*		short	2 byte(-32,768 ~ +32,767)
*		int		4 byte(-2,147,483,648 ~ +2,147,483,647)
*		long	8 byte(-9,223,372,036,854,775,808L ~ +9,223,372,036,854,775,807L)
* 
* << 정수의 표현 >>
* - 0 ~ 9 까지의 숫자를 사용하여 표현.
* - 기본적으로 10진수를 사용.
* - 진수의 표현
*		10진수 : 65
*		16진수 : 0x41 또는 0X41 (0x 또는 0X 접두어를 붙이고 0 ~ 9, A ~ F 까지 숫자로 표현)
*				 대소문자 구분은 하지 않는다!
*		8진수 : 0101 (0 접두어를 붙이고 0 ~ 7까지 숫자로 표현)
*	 즉,		65(10진수) = 0X41(16진수) = 0101(8진수) 가 된다.
* - 2진수는 표현할 수 없다. 보통 16진수로 표현한다.
* 
* << int 형 정수와 long 형 정수 >>
* - 기본적으로 123 등과 같은 수의 표현은 int 형(4바이트) 정수를 의미한다.
* - long 형(8바이트) 정수의 표현은 숫자 뒤에 접미사 L 또는 l 을 붙인다.
*		예) 123L, 0xA3l, 0Xa3L 등
* - 따라서 123 과 123L은 같은 정수이지만 크기가 틀린 정수이다.
* 
*/
public class Variable03
{
	public static void main(String[] args) 
	{
		byte 정수1 = 127;
		short 정수2 = 32767;
		int	정수3 = 2147483647;
		long 정수4 = 9223372036854775807L;

		System.out.println("정수1 : " + 정수1);
		System.out.println("정수2 : " + 정수2);
		System.out.println("정수3 : " + 정수3);
		System.out.println("정수4 : " + 정수4);
	}
}

/* 위의 예제를 컴파일하고 실행해 보면 정확한 결과가 나올 것이다.
* 만약, 각 변수에 크기를 벗어난 값을 할당하려 한다면?
* 1. 테스트
* - '정수1' 변수에 128을 넣어보자!
*	 컴파일시 어떤 내용의 에러가 발생하는가?
*   >> 에러내용:
*		possible loss of precision
*		found : int
*		required : byte
*				byte 정수1 = 128;
*
*   >> 이유:
*		'정수1' 에 127을 넣을 때는 아무런 문제가 없었다!
*		기본적으로 우리가 수를 표현 할 때는 int 형 정수로 취급한다고 했다. 그러나, 
*		상수를 변수에 넣을 때, 상수가 변수 데이터형 범위를 벗어나지 않는다면 문제없이
*		할당된다. 그러나, 변수의 데이터형 범위를 벗어난다면 당연히 데이터를 넣을 수 없으니까
*		문제가 발생할 것이다. 위의 예제의 경우가 바로 값의 범위를 벗어난 경우이다.
*		에러의 의미는 128은 int 형(4byte) 정수인데, 값을 담을 그릇(메모리)이 
*		1 byte 이기 때문에 정확성을 잃어버린다는 뜻이다.
*
* - '정수2', '정수3' 변수에도 예제에 있는 값보다 1 더큰 값을 넣어보자!
*	 같은 에러가 발생할 것이다.
*	 예)
*		short 정수2 = 32768;
*		int	정수3 = 2147483648;
*
* 2. 테스트
* - '정수4' 변수에 접미사 L을 빼고 할당해 보자
* - 예)
*		long 정수4 = 9223372036854775807;
* - 위와 같은 에러가 발생하는가? 아닐것이다. 다른 에러가 발생한다.
*	 >> 에러 내용:
*		integer number too large : 9223372036854775807
*		long 정수4 = 9223372036854775807;
*
*	 >> 이유 :
*		분명히 9223372036854775807L 의 값은 문제없이 할당 되었다. 그러나, 그깟 'L' 
*		문자 하나 뺏다고 에러가 발생하다니... 허~~~
*		분명히 데이터는 long 형의 값 범위를 벗어나지 않는다. 그럼 무엇이 문제인가?
*		흠.. 이것은 '데이터 표현'의 문제이다! 즉, 그냥 123 하면 int형 정수가 되지만
*		123L 하면 long형 정수가 된다. 그런데, 9223372036854775807 값은 도저히
*		int형 정수로 표현할 수가 없는 것이다. 즉, 4byte 범위를 벗어난 표현이다.
*		표현에도 int형 정수와 long형 정수가 있다는 사실을 잊지말기 바란다!
*/